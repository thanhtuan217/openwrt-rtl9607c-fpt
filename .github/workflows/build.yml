name: Build OpenWrt

on:
  workflow_dispatch:
    inputs:
      ssh_to_image:
        description: 'Enable SSH on the final image'
        required: false
        default: 'false'
      custom_firmware_name:
        description: 'Custom firmware filename (e.g., my_router_fw.bin)'
        required: false
        default: ''

  push:
    branches:
      - master # Hoặc main, tùy vào branch chính của bạn
    paths:
      - '.config' # Kích hoạt build khi file .config thay đổi
      - '.github/workflows/build.yml' # Kích hoạt build khi build.yml thay đổi

env:
  TZ: Asia/Ho_Chi_Minh

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Your Repo (Lấy .config và workflow)
        uses: actions/checkout@v4

      - name: Checkout OpenWrt Source 💡 FIX: Tải mã nguồn OpenWrt
        run: |
          # Clone mã nguồn OpenWrt chính thức vào thư mục con 'openwrt'
          # Bạn có thể thay 'openwrt-23.05' bằng 'main' nếu muốn bản mới nhất.
          git clone -b openwrt-23.05 https://github.com/openwrt/openwrt.git openwrt

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential diffutils gawk gcc-multilib libelf-dev libncurses5-dev rsync unzip wget git python3 file

      - name: Load custom config
        run: |
          # Copy .config từ thư mục gốc của repo vào thư mục OpenWrt
          cp .config openwrt/.config

      - name: Download and update feeds 💡 FIX: Chạy trong thư mục OpenWrt
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Adjust .config for G97RG6W (Final safety checks)
        working-directory: ./openwrt
        run: |
          # Xóa mọi DEVICE_XXXX khác để đảm bảo chỉ có G97RG6W được chọn
          sed -i '/CONFIG_TARGET_realtek_rtl83xx_DEVICE_.\*=y/d' .config
          # Thêm lại CONFIG_TARGET_realtek_rtl83xx_DEVICE_G97RG6W=y nếu chưa có
          grep -q "CONFIG_TARGET_realtek_rtl83xx_DEVICE_G97RG6W=y" .config || echo "CONFIG_TARGET_realtek_rtl83xx_DEVICE_G97RG6W=y" >> .config
          
          # Đảm bảo các gói Luci cơ bản được chọn
          grep -q "CONFIG_PACKAGE_luci=y" .config || echo "CONFIG_PACKAGE_luci=y" >> .config
          grep -q "CONFIG_PACKAGE_luci-compat=y" .config || echo "CONFIG_PACKAGE_luci-compat=y" >> .config
          grep -q "CONFIG_PACKAGE_luci-theme-bootstrap=y" .config || echo "CONFIG_PACKAGE_luci-theme-bootstrap=y" >> .config
          
          # Nếu muốn bật SSH trong ảnh cuối cùng
          if [ "${{ github.event.inputs.ssh_to_image }}" == "true" ]; then
            sed -i 's/# CONFIG_PACKAGE_dropbear is not set/CONFIG_PACKAGE_dropbear=y/' .config
          fi

      - name: Build firmware
        working-directory: ./openwrt
        run: |
          make defconfig
          make -j$(nproc) V=s

      - name: Prepare Artifacts
        id: prepare_artifacts
        run: |
          # Đường dẫn này giờ là tương đối từ thư mục gốc của runner (nơi build bắt đầu)
          FIRMWARE_DIR="./openwrt/bin/targets/realtek/rtl83xx"
          ARTIFACT_NAME="OpenWrt-G97RG6W-Firmware"
          
          # Tạo tên file custom nếu được cung cấp từ input
          CUSTOM_NAME="${{ github.event.inputs.custom_firmware_name }}"
          if [ -n "$CUSTOM_NAME" ]; then
            ARTIFACT_NAME="$CUSTOM_NAME"
          fi
          
          # Logic tìm kiếm file firmware (Giữ nguyên)
          FIRMWARE_FILE=$(find "$FIRMWARE_DIR" -maxdepth 1 -name "openwrt-*-g97rg6w-squashfs-factory.bin" -print -quit)
          
          if [ -z "$FIRMWARE_FILE" ]; then
            FIRMWARE_FILE=$(find "$FIRMWARE_DIR" -maxdepth 1 -name "openwrt-*-rtl9607c-squashfs-factory.bin" -print -quit)
          fi
          
          if [ -z "$FIRMWARE_FILE" ]; then
            FIRMWARE_FILE=$(find "$FIRMWARE_DIR" -maxdepth 1 -name "openwrt-*-rtl83xx-squashfs-factory.bin" -print -quit)
          fi
          
          if [ -z "$FIRMWARE_FILE" ]; then
            FIRMWARE_FILE=$(find "$FIRMWARE_DIR" -maxdepth 1 -name "openwrt-*-rtl838x-squashfs-factory.bin" -print -quit)
          fi
          
          if [ -z "$FIRMWARE_FILE" ]; then
            FIRMWARE_FILE=$(find "$FIRMWARE_DIR" -maxdepth 1 -name "*.squashfs-factory.bin" -print -quit)
          fi
          
          if [ -z "$FIRMWARE_FILE" ]; then
            echo "Error: Factory firmware file not found in $FIRMWARE_DIR"
            exit 1
          fi
          
          echo "Found firmware file: $FIRMWARE_FILE"
          echo "firmware_path=$FIRMWARE_FILE" >> $GITHUB_ENV
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "firmware_name=$(basename $FIRMWARE_FILE)" >> $GITHUB_ENV

      - name: Upload firmware as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.firmware_path }}
          retention-days: 7
