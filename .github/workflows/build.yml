name: Build OpenWrt RTL9607C

on:
  # Cho phép chạy thủ công qua giao diện GitHub
  workflow_dispatch:
    inputs:
      ssh_to_image:
        description: 'Enable SSH on the final image'
        required: false
        default: 'false'
      custom_firmware_name:
        description: 'Custom firmware filename (e.g., my_router_fw.bin)'
        required: false
        default: ''

  # Kích hoạt khi có thay đổi trên branch chính (master/main)
  push:
    branches:
      - master # Hoặc main, tùy vào branch chính của bạn
    paths:
      - '.config'
      - '.github/workflows/build.yml'
      - 'package/**' # Kích hoạt build khi các gói Realtek thay đổi

env:
  TZ: Asia/Ho_Chi_Minh
  OPENWRT_BRANCH: openwrt-23.05 # Bạn có thể đổi sang 'main' nếu muốn phiên bản mới nhất
  REPO_NAME: openwrt # Tên thư mục mã nguồn OpenWrt sau khi clone

jobs:
  build:
    runs-on: ubuntu-22.04 # Chạy trên runner Ubuntu tiêu chuẩn
    # Đã xóa 'container' để tránh lỗi kéo image

    steps:
      - name: Install dependencies
        # Cài đặt tất cả các gói cần thiết để build OpenWrt
        run: |
          sudo apt update
          sudo apt install -y build-essential diffutils gawk gcc-multilib libelf-dev libncurses5-dev rsync unzip wget git python3 file libssl-dev

      - name: Checkout Custom Files
        # Lấy các file cấu hình và package của bạn
        uses: actions/checkout@v4
        with:
          path: custom_repo # Đặt file của bạn vào thư mục custom_repo

      - name: Clone OpenWrt Source
        # Clone mã nguồn OpenWrt gốc vào thư mục 'openwrt'
        run: |
          git clone --depth 1 https://github.com/openwrt/openwrt -b ${{ env.OPENWRT_BRANCH }} ${{ env.REPO_NAME }}
          
      - name: Install Feeds (in OpenWrt dir)
        # Chạy scripts/feeds trong thư mục OpenWrt vừa clone
        working-directory: ./${{ env.REPO_NAME }}
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Copy Custom Packages and Config
        # Di chuyển các tệp tin tùy chỉnh của bạn vào OpenWrt
        run: |
          # Copy các packages Realtek của bạn vào thư mục package của OpenWrt
          cp -r custom_repo/package/* ./${{ env.REPO_NAME }}/package/
          # Copy .config vào thư mục OpenWrt
          cp custom_repo/.config ./${{ env.REPO_NAME }}/.config

      - name: Adjust .config and Apply Patches
        working-directory: ./${{ env.REPO_NAME }}
        run: |
          # Áp dụng patch nếu bạn có (tôi đã tạm comment, bạn có thể uncomment nếu cần)
          # if [ -f ../custom_repo/openwrt-rtl9607c-fpt.patch ]; then
          #   patch -p1 < ../custom_repo/openwrt-rtl9607c-fpt.patch
          # fi
          
          # Chạy defconfig để tích hợp các gói và cấu hình mới
          make defconfig
          
          # Tối ưu hóa .config: Xóa và thêm lại CONFIG_TARGET_DEVICE cho chắc chắn
          # Giả sử cấu hình target của bạn là realtek/rtl83xx
          sed -i '/CONFIG_TARGET_realtek_rtl83xx_DEVICE_.*=y/d' .config
          grep -q "CONFIG_TARGET_realtek_rtl83xx_DEVICE_G97RG6W=y" .config || echo "CONFIG_TARGET_realtek_rtl83xx_DEVICE_G97RG6W=y" >> .config
          
          # Bật SSH nếu được yêu cầu
          if [ "${{ github.event.inputs.ssh_to_image }}" == "true" ]; then
            sed -i 's/# CONFIG_PACKAGE_dropbear is not set/CONFIG_PACKAGE_dropbear=y/' .config
          fi

      - name: Download Build Dependencies
        working-directory: ./${{ env.REPO_NAME }}
        run: make download -j$(nproc)

      - name: Build Firmware
        working-directory: ./${{ env.REPO_NAME }}
        run: make -j$(nproc) V=s

      - name: Prepare Artifacts
        id: prepare_artifacts
        run: |
          FIRMWARE_DIR="./${{ env.REPO_NAME }}/bin/targets/realtek/rtl83xx"
          ARTIFACT_NAME="OpenWrt-RTL9607C-G97RG6W-Firmware"
          
          CUSTOM_NAME="${{ github.event.inputs.custom_firmware_name }}"
          if [ -n "$CUSTOM_NAME" ]; then
            ARTIFACT_NAME="$CUSTOM_NAME"
          fi
          
          # Logic tìm kiếm file firmware (ưu tiên G97RG6W)
          FIRMWARE_FILE=$(find "$FIRMWARE_DIR" -maxdepth 1 -type f -name "*g97rg6w*-squashfs-factory.bin" -o -name "*rtl83xx*-squashfs-factory.bin" | head -n 1)

          if [ -z "$FIRMWARE_FILE" ]; then
            echo "Error: Factory firmware file not found in $FIRMWARE_DIR"
            exit 1
          fi

          echo "Found firmware file: $FIRMWARE_FILE"
          echo "firmware_path=$FIRMWARE_FILE" >> $GITHUB_ENV
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Upload firmware as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.firmware_path }}
          retention-days: 7
